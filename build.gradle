buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // bcrypt
    implementation 'at.favre.lib:bcrypt:0.10.2'

    // jwt
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    // QueryDSL JPA 의존성
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    // QueryDSL Annotation Processor
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    // Jakarta API 의존성
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api:2.1.1"

}
//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"


sourceSets {
    main {
        java {
            srcDirs += querydslDir
        }
    }
}

// compileQuerydsl 태스크 정의
if (!tasks.names.contains("compileQuerydsl")) {
    tasks.register("compileQuerydsl", JavaCompile) {
        source = sourceSets.main.java
        classpath = configurations.compileClasspath + configurations.annotationProcessor
        options.annotationProcessorPath = configurations.annotationProcessor
        destinationDirectory.set(file(querydslDir))
    }
}

tasks.named('compileJava') {
    options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/querydsl")
    // 경고 억제 (선택 사항)
    options.compilerArgs += ["-Xlint:-processing"]
}

task printDependencies {
    doLast {
        configurations.compileClasspath.each { println it }
    }
}

//querydsl 추가 끝

tasks.named('test') {
    useJUnitPlatform()
}
